# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eblFr1f6DARERcWmVsKP9Uo7B_83w03K
"""

# Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.model_selection import train_test_split

# Fetch Stock Data using Yahoo Finance (You can replace 'AAPL' with any stock symbol)
stock_symbol = 'AAPL'  # You can change this to any stock ticker, e.g., 'GOOGL', 'TSLA', etc.
data = yf.download(stock_symbol, start='2015-01-01', end='2021-01-01')

# Visualize Stock Data
plt.figure(figsize=(12,6))
plt.plot(data['Close'], label='Close Price')
plt.title(f'{stock_symbol} Stock Price')
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.legend()
plt.show()

# Preprocess Data: Use 'Close' price for prediction
data = data[['Close']]

# Normalize Data to a range between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Create Data for Training: Use the previous 60 days to predict the next day's price
X = []
y = []
for i in range(60, len(scaled_data)):
    X.append(scaled_data[i-60:i, 0])  # Previous 60 days data
    y.append(scaled_data[i, 0])  # Next day's price

X = np.array(X)
y = np.array(y)

# Reshape X for LSTM model [samples, time steps, features]
X = X.reshape(X.shape[0], X.shape[1], 1)

# Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Build the LSTM Model
model = Sequential()

# Add LSTM layers with Dropout to avoid overfitting
model.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=100, return_sequences=False))
model.add(Dropout(0.2))

# Add Dense Layer
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=32)

# Predict the stock prices using the model
predictions = model.predict(X_test)

# Inverse Transform the Predictions to the original scale (USD)
predictions = scaler.inverse_transform(predictions)

# Inverse Transform the y_test to original scale (USD)
y_test_original = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot the results
plt.figure(figsize=(12,6))
plt.plot(y_test_original, color='red', label=f'Actual {stock_symbol} Stock Price')
plt.plot(predictions, color='blue', label=f'Predicted {stock_symbol} Stock Price')
plt.title(f'{stock_symbol} Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price USD ($)')
plt.legend()
plt.show()

# Evaluate model performance
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test_original, predictions)
print(f"Mean Squared Error: {mse}")